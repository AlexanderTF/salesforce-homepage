import { LightningElement, wire } from 'lwc';
import getOpportunityStageCounts from '@salesforce/apex/OpportunityController.getOpportunityStageCounts';

export default class MyComponent extends LightningElement {
    radius = 250;
    svgSize = 500;

    stageCounts;
    totalOpportunities;
    error;
    
    color = ['red','blue','orange'];
    donutData = [];

    @wire(getOpportunityStageCounts)
    wiredStageCounts({ error, data }) {
        if (data) {
            this.stageCounts = data;
            this.totalOpportunities = Object.values(data).reduce((acc, value) => acc + value, 0);
            this.createDonutData();
            //this.error = undefined;
        } else if (error) {
            this.error = error;
            this.stageCounts = undefined;
        }
    }

    createDonutData(){
        let startAngle = 0;
        let endAngle = 0;

        for (let stage in this.stageCounts) {
            const count = this.stageCounts[stage];
            const percentage = this.getPercentage(count, this.totalOpportunities);
            endAngle = startAngle + percentage;

            const startCoord = this.getCoordFromDegrees(startAngle, this.radius, this.svgSize);
            const endCoord = this.getCoordFromDegrees(endAngle, this.radius, this.svgSize);

            const innerStartCoord = this.getCoordFromDegrees(endAngle, this.radius - 5, this.svgSize);
            const innerEndCoord = this.getCoordFromDegrees(startAngle, this.radius - 5, this.svgSize);

            const largeArcFlag = (this.endAngle - this.startAngle) > 180 ? 1 : 0;

            this.donutData.push({
                stage: stage,
                pathData: this.createPathData(startCoord, endCoord, largeArcFlag, innerStartCoord, innerEndCoord)
            })

            startAngle = endAngle;
        }   
    }

    createPathData(startCoord, endCoord, largeArcFlag, innerStartCoord, innerEndCoord) {
        return `M ${startCoord[0]} ${startCoord[1]} 
                A ${this.radius} ${this.radius} 0 ${largeArcFlag} 0 ${endCoord[0]} ${endCoord[1]}
                L ${innerStartCoord[0]} ${innerStartCoord[1]}
                A ${this.radius - 5} ${this.radius - 5} 0 ${largeArcFlag} 1 ${innerEndCoord[0]} ${innerEndCoord[1]}`;
    }

    // Function to get coordinates from degrees
    getCoordFromDegrees(angle, radius, svgSize) {
        const x = Math.cos(angle * Math.PI / 180);
        const y = Math.sin(angle * Math.PI / 180);
        const coordX = x * radius + svgSize / 2;
        const coordY = y * -radius + svgSize / 2;
        return [coordX, coordY];
    }

    getPercentage(numOppInStage,numOfOpp) {
        return ((numOppInStage * 360) / numOfOpp);
    }
}


 
